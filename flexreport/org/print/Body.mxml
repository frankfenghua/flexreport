<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * ============================================================================
 * GNU Lesser General Public License
 * ============================================================================
 *
 * FlexReport - Free Flex report-generating library.
 * Copyright (C) 2008 Frederico Garcia
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 * 
 * Frederico Garcia
 * fmotagarcia@kemelyon.com
 * http://www.kemelyon.com
 */
 
/*
 * Contributors:
 * 
 */
 -->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="400" 
	height="300" 
	creationComplete="initComponent()">
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;

			private var children:Array;
			
			private function initComponent():void
			{
				children = getChildren();
				render();
			}
				
			private function render():void
			{
				removeAllChildren();
				
				currentChildIndex = 0;
				pageFirstIndex = 0;
							
				while (maxVerticalScrollPosition == 0 && currentChildIndex<children.length) {
					addChild(children[currentChildIndex]);
					validateNow();
					
					
					if (children[currentChildIndex].hasOwnProperty("validNextPage") && children[currentChildIndex].validNextPage) {
						break;
					}
					currentChildIndex++;
				} 
				
				if (currentChildIndex >= children.length) {
					currentChildIndex--;
				}

				if (maxVerticalScrollPosition != 0) {
					removeChildAt(currentChildIndex);
					validateNow();
					currentChildIndex--;
				}
			}
			
			public function get validNextPage():Boolean
			{	
				var moreChildren:Boolean = currentChildIndex<children.length-1;
				var morePages:Boolean = (children[currentChildIndex].hasOwnProperty("validNextPage") && children[currentChildIndex].validNextPage);
				
				return (moreChildren||morePages)?true:false;
			}
			
			private var pageFirstIndex:uint = 0;
			private var currentChildIndex:uint = 0;
			
			public function nextPage():void {
				var stop:Boolean = false;
				do {
					for (var i:int = pageFirstIndex; i < currentChildIndex; i++) {
						removeChild(children[i]);
					}

					if (children[currentChildIndex].hasOwnProperty("validNextPage") && children[currentChildIndex].validNextPage) {
						children[currentChildIndex].nextPage();
					}
					else {
						removeChild(children[currentChildIndex]);
					}
					validateNow();
					
					currentChildIndex++;
					if (currentChildIndex < children.length) {
						addChild(children[currentChildIndex]);
						validateNow();
					}
					else {
						currentChildIndex--;
					}
					
					if (maxVerticalScrollPosition != 0) {
						removeChild(children[currentChildIndex]);
						validateNow();
						currentChildIndex--;
					}
					
					stop = true;
					
				} while (!stop);
			}
			
			public function reset():void
			{
				resetChildren();
				currentChildIndex = 0;
				removeAllChildren();
				render();
			}
			
			private function resetChildren():void
			{
				var child:Object;
				for each (child in children) {
 					try {
						child.reset();
					} catch (err:ReferenceError) {}
				}
			}
		]]>
	</mx:Script>
</mx:VBox>
