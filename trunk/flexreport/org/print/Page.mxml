<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * ============================================================================
 * GNU Lesser General Public License
 * ============================================================================
 *
 * FlexReport - Free Flex report-generating library.
 * Copyright (C) 2008 Frederico Garcia
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 * 
 * Frederico Garcia
 * fmotagarcia@kemelyon.com
 * http://www.kemelyon.com
 */
 
/*
 * Contributors:
 * 
 */
 -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="400" 
	height="300" 
	backgroundColor="#c0c0c0" 
	currentState="horizontal">
	
	<mx:states>
		<mx:State name="horizontal">
			<mx:SetStyle target="{printPreview}" name="horizontalCenter" value="0"/>
			<mx:SetProperty target="{printPreview}" name="scaleContent" value="true"/>
			<mx:SetStyle name="backgroundColor" value="#f0f0f0"/>
		</mx:State>
		<mx:State name="left">
			<mx:SetStyle target="{printPreview}" name="left" value="0"/>
			<mx:SetStyle target="{printPreview}" name="horizontalCenter"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import org.doc.PaperFormat;
			
			private var sourceHeight:Number;
			private var sourceWidth:Number;
			
			[Bindable]
			private var _source:ByteArray;
					
			public function set source(value:ByteArray):void
			{
				_source = value;
				
				verticalScrollPosition = 0;
				
				if(_paperFormat!==null) {
					load();
				}
				
				dispatchEvent(new Event("sourceChanged"));
			}
			
			[Bindable(event="sourceChanged")]
			public function get source():ByteArray
			{
				return _source;
			}	
					
			[Bindable] private var _paperFormat:PaperFormat;
			public function set paperFormat(value:PaperFormat):void {
				_paperFormat = value;
				
				printPreview.height = _paperFormat.height;
				printPreview.width = _paperFormat.width;	
				
				load();			
			}
			
			private function load():void {
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadCompleteHandler);

				loader.loadBytes(_source);
			}
				
			private function loadCompleteHandler(event:Event):void {
				var loader:Loader = Loader(event.target.loader);
				_scaledBmp = Bitmap(loader.content);
				_scaledBmp.smoothing = true;
			}
							
			[Bindable]
			private var _scaledBmp:Bitmap;
			
            [Bindable]
            public var zoom:Number = 1;
            
            private var zoomList:Array =  [.25,.5,.75,1,1.5,2];
            private var zoomPosition:int = 3;
            
            public var originalWidth:Number;
            public var originalHeight:Number;
            
            public function zoomIn():void
            {
            	if (zoomPosition < zoomList.length-1) {
            		zoomPosition++;
            		zoom = zoomList[zoomPosition];
           		           			
            		printPreview.height = _paperFormat.height * zoom;
            		printPreview.width = _paperFormat.width * zoom;

            		if (width < printPreview.width) {
            			align("left");
            		} else {
            			align("center");
            		}
            	}
            }
            
            public function zoomOut():void
            {        	
             	if (zoomPosition > 0) {
            		zoomPosition--;
            		zoom = zoomList[zoomPosition];
           		
            		printPreview.height = _paperFormat.height * zoom;
            		printPreview.width = _paperFormat.width * zoom;
            		
             		if (width < printPreview.width) {
            			align("left");
            		} else {
            			align("center");
            		}          		           		
            	}           	
            }
                     			
	        private function align(anchor:String):void
	        {
	        	if (anchor === "center") {
					   currentState = 'horizontal';     		
	        	} else if (anchor === "left") {
					   currentState = 'left';        		
	        	}
	        	updateDisplayList(unscaledWidth,unscaledHeight);
	        }
	        
	        public function get bitmapData():BitmapData {
	        	return _scaledBmp!==null?_scaledBmp.bitmapData:null;
	        }			
		]]>
	</mx:Script>
	<mx:Image width="{_paperFormat!==null?_paperFormat.width:PaperFormat.A4.width}" height="{_paperFormat!==null?_paperFormat.height:PaperFormat.A4.height}" id="printPreview" top="10" source="{_scaledBmp}" horizontalCenter="0">
		<mx:filters> 
		    <flash.filters:DropShadowFilter id='dropShadowFilter' xmlns:flash.filters='flash.filters.*' 
		      	angle='0'
		        blurX='8' blurY='8'
		        distance='0'
		        alpha='0.3' color='#000000' 
		        knockout='false' quality='2'
		        strength='2' inner='false' hideObject='false'/> 
		</mx:filters>		
	</mx:Image>
</mx:Canvas>
